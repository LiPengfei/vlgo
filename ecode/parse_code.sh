#!/usr/bin/env bash

function codeFiles() {
	echo "../proto/inner_code.proto ../proto/error_code.proto"
}

function first2Up() {
	local str=$1
	local firstL=${str:0:1}
	local tailLs=${str:1}
	local firstL=$(echo $firstL | tr '[a-z]' '[A-Z]')
	echo $firstL$tailLs
}

function upWords() {
	local s=$1
	local ret
	s=(${s//_/ })
	for v in ${s[@]}; do
		ret=$ret$(first2Up $v)
	done
	echo $ret
}

function code2Codes() {
	local s="$1"
	s=${s//=/ }
	if [[ s == "" ]]; then
		return 1
	fi

	if [[ s == /* ]]; then
		return 1
	fi

	s=${s//=/ }
	s=${s//;/ }
	s=${s//\/\// }
	echo "${s// / }"
}
# code2Codes "invalid_request = 1 ; // 非法请求"

function middleFile() {
	echo "$1".code
}

function middleCodes() {
	for protoF in $(codeFiles) ; do
		local mFile=$(middleFile $protoF)
		awk '/enum/{flag=1;next} /}/{flag=0} flag' $protoF > $mFile
	done
}
# middleCodes

function delTmpCodes() {
	for protoF in $(codeFiles) ; do
		local mFile=$(middleFile $protoF)
		rm $mFile
	done
}

function goFromProto() {
	local protoF=$1
	local tfName=$(tmpInnerFile "$(goFile $protoF)")
	goGenHead $protoF $tfName

	local mFile=$(middleFile $protoF)
	while read s; do
		echo -e "\t"$(goErrCode "$s") >> $tfName
	done < $mFile
	echo ")" >> $tfName

	mvTarget $tfName
}

function goErrCode() {
	local code="$1"
	local codes=($(code2Codes "$code"))

	if [[ ${#codes[@]} < 2 || ${codes[1]} == 0 ]]; then
		return 1
	fi

	local codeName="Err$(upWords ${codes[0]})"
	local goInt=${codes[1]}
	local goCom="// ${codes[2]}"

	if [[ $2 == revert ]]; then
		echo "case $goInt: return $codeName $goCom"
	else
		echo "$codeName = newVError(\"$codeName\", $goInt) $goCom"
	fi
}
# goErrCode "test_test = 1000000; // 测试"
# goErrCode "test_test = 1000000; // 测试" revert

function goGenHead() {
	local protoF=$1
	local tfName=$2
	cat > $tfName << EOF
// Code generated by parse_code.sh. DO NOT EDIT
// source: $protoF

package ecode

var (
EOF
}

function goFile() {
	local protoF=$1
	protoF=${protoF##*/}
	echo ${protoF%%.*}.go
}
# goFile ../proto/a.proto

function mvTarget() {
	local tmpFile=$1
	echo "gen ${tmpFile##*/} to ${tmpFile%%.tmp.*}"
	mv $tmpFile ${tmpFile%%.tmp.*}
	rm -rf $tmpFile ${tmpFile%%.tmp.*}.tmp.*
}

function tmpInnerFile() {
	echo "$1".tmp.$(awk 'BEGIN{srand(); print rand()*1000000}')
}
# tmpInnerFile "abcdefg"

function GoGen() {
	middleCodes
	local errFiles=($(codeFiles))
	for protoF in ${errFiles[@]}; do
		goFromProto $protoF
	done

	local baseF=$(tmpInnerFile "base.go")
	cat > $baseF << EOF
// Code generated by parse_code.sh. DO NOT EDIT

package ecode

import "github.com/LiPengfei/vlgo/proto/pb_gen"

var ErrSuccess = newVError("ErrSuccess", 0) // 成功

func ErrInfo2VEI(errInfo *pb_gen.ErrorInfo) VEI {
	if errInfo == nil {
		return nil
	}

	switch errInfo.Code {
EOF

	for protoF in ${errFiles[@]}; do
		local mFile=$(middleFile $protoF)
		while read s; do
			echo -e "\t"$(goErrCode "$s" revert) >> $baseF
		done < $mFile
	done

	echo -e "\tcase 0: return ErrSuccess" >> $baseF
	echo -e "\tdefault: return ErrUnexpect" >> $baseF
	echo -e "\t}\n}" >> $baseF
	delTmpCodes
	mvTarget $baseF
}

function main() {
	GoGen
}

main
